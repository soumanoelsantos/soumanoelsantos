
export const extractCodeFromResponse = (response: string) => {
  console.log('üîç Iniciando extra√ß√£o de c√≥digo da resposta...');
  console.log('üìÑ Resposta recebida (primeiros 500 chars):', response.substring(0, 500));
  
  // 1. Procurar por blocos de c√≥digo TSX/JSX expl√≠citos
  const tsxBlockMatch = response.match(/```(?:tsx|jsx|typescript|react)\s*([\s\S]*?)```/i);
  if (tsxBlockMatch && tsxBlockMatch[1].trim()) {
    const code = tsxBlockMatch[1].trim();
    if (isValidReactCode(code)) {
      console.log('‚úÖ C√≥digo React TSX v√°lido encontrado');
      console.log('üìè Tamanho do c√≥digo extra√≠do:', code.length);
      return code;
    }
  }

  // 2. Procurar por blocos de c√≥digo gen√©ricos que sejam React v√°lidos
  const genericCodeMatch = response.match(/```[a-zA-Z]*\s*([\s\S]*?)```/);
  if (genericCodeMatch && genericCodeMatch[1].trim()) {
    const code = genericCodeMatch[1].trim();
    if (isValidReactCode(code)) {
      console.log('‚úÖ C√≥digo React v√°lido encontrado em bloco gen√©rico');
      console.log('üìè Tamanho do c√≥digo extra√≠do:', code.length);
      return code;
    }
  }

  // 3. Procurar por componentes React v√°lidos no texto
  const reactComponentMatches = [
    // Componente React funcional completo
    /import\s+React[^;]*;[\s\S]*?export\s+default\s+\w+;/,
    // Componente React com fun√ß√£o
    /const\s+\w+\s*=\s*\(\s*\)\s*=>\s*\{[\s\S]*?\};[\s\S]*?export\s+default\s+\w+;/,
    // Arquivo de p√°gina React
    /import\s+React[^;]*;[\s\S]*?const\s+\w+\s*=[\s\S]*?export\s+default\s+\w+;/
  ];

  for (const pattern of reactComponentMatches) {
    const match = response.match(pattern);
    if (match) {
      const code = match[0].trim();
      if (isValidReactCode(code)) {
        console.log('‚úÖ Componente React v√°lido encontrado');
        console.log('üìè Tamanho do c√≥digo extra√≠do:', code.length);
        return code;
      }
    }
  }

  // 4. Verificar se h√° c√≥digo que pare√ßa React mas esteja malformado
  if (response.includes('import React') || response.includes('export default')) {
    console.log('‚ö†Ô∏è C√≥digo React detectado mas pode estar incompleto - tentando extrair mesmo assim');
    
    // Tentar extrair componente mesmo que n√£o passe na valida√ß√£o rigorosa
    const componentMatch = response.match(/import React[\s\S]*?export default \w+;?/);
    if (componentMatch) {
      console.log('üìù Extraindo componente detectado:', componentMatch[0].substring(0, 200));
      return componentMatch[0];
    }
  }

  console.log('‚ùå Nenhum c√≥digo React v√°lido encontrado na resposta');
  return null;
};

// Fun√ß√£o para validar se o c√≥digo √© React v√°lido - vers√£o mais permissiva
const isValidReactCode = (code: string): boolean => {
  console.log('üîç Validando c√≥digo React...');
  
  // Verifica√ß√µes b√°sicas de sintaxe React
  const hasValidImports = code.includes('import React') || code.includes('import');
  const hasExportDefault = code.includes('export default');
  const hasValidComponent = /const\s+\w+\s*=|function\s+\w+/.test(code);
  
  // Verificar se tem estrutura JSX b√°sica v√°lida
  const hasValidJSX = /<[A-Z][\w]*/.test(code) || /<div|<section|<main|<header/.test(code);
  
  // Verificar se n√£o tem HTML puro (deve ser JSX/React)
  const isPureHTML = code.includes('<!DOCTYPE html>') || 
                     (code.includes('<html') && !code.includes('import'));

  // Vers√£o mais permissiva - aceitar se tem pelo menos imports e exports v√°lidos
  const isValid = hasValidImports && 
                  hasExportDefault && 
                  !isPureHTML;

  console.log('üìä Valida√ß√£o de c√≥digo React:');
  console.log('- Imports v√°lidos:', hasValidImports);
  console.log('- Export default:', hasExportDefault);
  console.log('- Componente v√°lido:', hasValidComponent);
  console.log('- JSX v√°lido:', hasValidJSX);
  console.log('- N√£o √© HTML puro:', !isPureHTML);
  console.log('- Resultado final:', isValid);

  if (!isValid) {
    console.log('‚ùå C√≥digo rejeitado - n√£o atende aos crit√©rios m√≠nimos de React');
    console.log('üîç Primeiros 500 chars do c√≥digo rejeitado:', code.substring(0, 500));
  } else {
    console.log('‚úÖ C√≥digo React aceito para preview');
  }

  return isValid;
};
