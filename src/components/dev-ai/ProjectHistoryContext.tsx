
import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { ProjectVersion, ProjectHistoryContextType } from '@/types/projectHistory';
import { useDevAI } from './DevAIContext';

const ProjectHistoryContext = createContext<ProjectHistoryContextType | undefined>(undefined);

export const useProjectHistory = () => {
  const context = useContext(ProjectHistoryContext);
  if (!context) {
    console.warn('‚ö†Ô∏è useProjectHistory chamado fora do ProjectHistoryProvider');
    return undefined;
  }
  return context;
};

interface ProjectHistoryProviderProps {
  children: ReactNode;
}

export const ProjectHistoryProvider: React.FC<ProjectHistoryProviderProps> = ({ children }) => {
  const [versions, setVersions] = useState<ProjectVersion[]>([]);
  const [currentVersion, setCurrentVersion] = useState<number>(0);
  const devAI = useDevAI();

  // Debug: Log quando o provider √© inicializado
  useEffect(() => {
    console.log('üèóÔ∏è ProjectHistoryProvider inicializado');
    console.log('- DevAI context dispon√≠vel:', !!devAI);
    console.log('- setGeneratedCode dispon√≠vel:', !!(devAI?.setGeneratedCode));
  }, [devAI]);

  const addVersion = (code: string, message: string, userMessage?: string) => {
    if (!devAI?.currentProject) {
      console.warn('‚ö†Ô∏è Tentativa de adicionar vers√£o sem projeto ativo');
      console.warn('- DevAI dispon√≠vel:', !!devAI);
      console.warn('- Projeto atual:', devAI?.currentProject?.name || 'nenhum');
      return;
    }

    console.log('üìù Adicionando nova vers√£o...');
    console.log('- Projeto:', devAI.currentProject.name);
    console.log('- Mensagem:', message);
    console.log('- Mensagem do usu√°rio:', userMessage);
    console.log('- C√≥digo (primeiros 100 chars):', code.substring(0, 100));

    const newVersion: ProjectVersion = {
      id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      version: versions.length + 1,
      code,
      message,
      timestamp: new Date(),
      userMessage
    };

    console.log('üÜï Nova vers√£o criada:', {
      id: newVersion.id,
      version: newVersion.version,
      timestamp: newVersion.timestamp.toISOString()
    });

    setVersions(prev => {
      const updated = [...prev, newVersion];
      console.log('üìä Vers√µes ap√≥s adicionar:', updated.length);
      console.log('üìã Lista de vers√µes:');
      updated.forEach((v, i) => {
        console.log(`  ${i + 1}. v${v.version}: ${v.message} (${v.timestamp.toLocaleTimeString()})`);
      });
      return updated;
    });
    
    setCurrentVersion(newVersion.version);
    
    console.log(`‚úÖ Nova vers√£o adicionada: v${newVersion.version} - ${message}`);
  };

  const revertToVersion = (version: number) => {
    if (!devAI?.setGeneratedCode) {
      console.error('‚ùå setGeneratedCode n√£o dispon√≠vel para reverter');
      return;
    }

    const targetVersion = versions.find(v => v.version === version);
    if (!targetVersion) {
      console.error(`‚ùå Vers√£o ${version} n√£o encontrada`);
      console.log('üìã Vers√µes dispon√≠veis:', versions.map(v => v.version));
      return;
    }

    console.log(`‚è™ Revertendo para vers√£o ${version}: ${targetVersion.message}`);
    setCurrentVersion(version);
    devAI.setGeneratedCode(targetVersion.code);
    
    console.log('‚úÖ Revers√£o conclu√≠da');
  };

  const getVersionByNumber = (version: number) => {
    const found = versions.find(v => v.version === version);
    console.log(`üîç Buscando vers√£o ${version}:`, found ? 'encontrada' : 'n√£o encontrada');
    return found;
  };

  // Debug: Log sempre que versions mudar
  useEffect(() => {
    console.log('üîÑ Estado de vers√µes atualizado:');
    console.log('- Total de vers√µes:', versions.length);
    console.log('- Vers√£o atual:', currentVersion);
    
    if (versions.length > 0) {
      console.log('üìã Detalhes das vers√µes:');
      versions.forEach((v, i) => {
        const isCurrent = v.version === currentVersion;
        console.log(`  ${isCurrent ? 'üëâ' : '  '} v${v.version}: ${v.message} (${v.timestamp.toLocaleTimeString()})`);
      });
    } else {
      console.log('üì≠ Nenhuma vers√£o salva ainda');
    }
  }, [versions, currentVersion]);

  // Debug: Log quando o projeto muda
  useEffect(() => {
    if (devAI?.currentProject) {
      console.log('üîÑ Projeto mudou:', devAI.currentProject.name);
      console.log('- Limpando hist√≥rico para novo projeto');
      // N√£o limpar automaticamente - deixar para o usu√°rio decidir
    }
  }, [devAI?.currentProject?.id]);

  const contextValue: ProjectHistoryContextType = {
    versions,
    currentVersion,
    addVersion,
    revertToVersion,
    getVersionByNumber
  };

  console.log('üéØ ProjectHistoryProvider renderizando com contexto:', {
    versionsCount: versions.length,
    currentVersion,
    hasAddVersion: !!addVersion,
    hasRevertToVersion: !!revertToVersion
  });

  return (
    <ProjectHistoryContext.Provider value={contextValue}>
      {children}
    </ProjectHistoryContext.Provider>
  );
};
